/***** Program Purpose: Create Payment Behavior Report for the Representative Pool***/
/***data Source: SDS Oracle data (fct_ccs_instruments) and EIW Minimaster and EMSR Transaction files Last updated 2/2/2024 ****/

options obs = max threads=yes compress-binary;
%include "~/passwords.sas";
libname sds oracle user=&sdslog pass="&sdspwd" path=p011rdr schema=sds;
libname out '/workspace/ccsec/reports/Payment_Behavior/data';

/*** CALCULATES DATE PARAMETERS *****/

/** DATE PARAMETERS USED FOR REPORT TITLES AND TO SPECIFY THE AS-OF DATE FROM SDS THAT IS USED TO PULL DATA *****/

%let m = 202312;
%macro wrk;

%if %substr(&m,5,2) = 01 %then %do;
%let mp-%eval(&m-89);
%end;

%else %if %substr(&m,5,2) = 02 %then %do; %let mp-%eval(&m-90);
%end;
%else %if %substr(&m,5,2) = 03 %then %do; %let mp=&m;
%end;
%else %if %substr(&m,5,2) = 04 %then %do; %let mp-%eval(&m-1);
%end;
%else %if %substr(&m,5,2) = 05 %then %do;
%let mp = %eval(&m-2);
%end;
%else %if %substr(&m,5,2) = 06 %then %do;
%end;
%let mp=&m;
%else %if %substr(&m,5,2) = 07 %then %do;
%end;
%let mp=%eval(&m-1);
%else %if %substr(&m, 5,2) = 08 %then %do; 
%let mp-%eval(&m-2);
%end;
%else %if %substr(&m,5,2) = 09 %then %do;
%end;
%let mp=&m;
%else %if %substr(&m, 5,2)= 10 %then %do;
%let mp-%eval(&m-1);
%end;
%else %if %substr(&m,5,2) = 11 %then %do;
%let mp = %eval(&m-2);
%end;
%else %if %substr(&m,5,2) = 12 %then %do;
%let mp=&m;
%end;

%if %substr(&m, 5,2) = 01 %then %let mp1-%eval (&m-89);
%else %let mp1=%eval(&m-1);

/**** creates macro date variables used for the data pull ****/

data _null_;
     bomdt = input("&m.01", yymmdd8.);
     nextmth=intnx ("month", bomdt,1); eomdt-intnx("day", nextmth, -1);
     call symput('mmmth', cat("*", put (eomdt, YYMMDD10.), "'")); 
     call symput('bom', cat("*", put (bomdt, YYMMDD10.),"*")); 
     call symput('mth', put (eomdt, month.));
     call symput('yr', put (eomdt,year4.));
     call symput('yr', put (eomdt,year4.));
     call symput('dy', put (eomdt, day2.));
     call symput('eom', cat("*", put (eomdt, YYMMDD10.), "'"));
     x=intnx('day', "&sysdate9"d, -1);
     call symput('currday', cat("*", put(x,YYMMDD10.),"")); call symput('dy2', put(x, day2.));
     bomdtp-input("&mp1.01",yymmdd8.); nextmthp-intnx ("month", bomdtp,1); eomdtp-intnx("day", nextmthp,-1);
     call symput('eomp', cat("*", put (eomdtp, YYMMDD10.),"*"));
     call symput('title2', cat ("As of billing date prior to Quarter ended ", "&mth","/", "&dy","/", "&yr"));
run;

%let cds=%eval(&m*100+&dy);

/******************* PULLS DATA FROM SDS *****************************/

proc sql;

create table sds_r_pool as
select /*+ parallel (4)*/
fctccs.acct_number   as acct_number,
fctccs.persist_acct_number  as acct_id,
fctccs.external_status as sds_exstatcd,

/*dimccs.system_number   as system */

fctccs.portfolio_code  as portno,
fctccs.calendar_day_sid as sds_date
from
sds.fct_ccs_instruments fctccs
WHERE
fctccs.calendar_day_sid = &cds and fctccs.REPRESENTATIVE_FLAG='Y'

/* and fctccs.securitized_flag='Y' */ /* use if only want the trust pool */
;
quit; 
run;

proc sort data=sds_r_pool nodupkey;
by acct_number;
run;

/*************************** PULLS DATA FROM EIW *************************/

proc sql;

connect to teradata (user=&adwlog password="&adwpwd" TDPID=EIWP FASTEXPORT=YES); 

create table tempmm as
select *
from connection to teradata
(
SELECT
      MM.ASOFDATE,
      FROM
      MM.ACCOUNT_ID,
      MM.ACCOUNT NUMBER,
      MM.CURRENT_ACCOUNT_INDICATOR,
      MM. PORTFOLIO_NO,
      MM. CURRENT BALANCE AS BALEOM, MMP.CURRENT_BALANCE AS BALBOM, MM.HIST_LS_BAL AS BALEOC, MMP.HIST_LS_BAL AS BALBOC,
      MM. EXTERNAL_STATUS AS EXSTATCD,
      MMP.LS BILLED_PAY_DUE AS DUEMINLSTMTH,
      CASE WHEN MM. EXTERNAL_STATUS in ('','A','') THEN 1 ELSE END AS OPENind, CASE WHEN MM. EXTERNAL_STATUS='Z' THEN 1 ELSE 0 END AS CO
FROM
EIW_S_FDRCC_V1.MM_MONTHLY_ALL MM
LEFT OUTER JOIN EIW_S_FDRCC_V1.MM_MONTHLY ALL MMP ON MM.ACCOUNT_NUMBER-MMP.ACCOUNT_NUMBER AND MMP.ASOFDATE=&eomp
WHERE
   MM.ASOFDATE=&eom AND
   MM.CTGY_CD='E'
ORDER BY

   MM.ACCOUNT NUMBER,
   MM.ASOFDATE
);

create table temptran as select *
from connection to teradata
(
SELECT
TRAN.ACCOUNT_NUMBER,
CAST(sum (CASE WHEN CDTL_DETAIL_TYPE=271 THEN -CDTL_ITEM_AMT
WHEN CDTL_DETAIL_TYPE=272 THEN -CDTL_ITEM_AMT END) AS DECIMAL (16,2)) AS PMTAMTNETEOC
FROM
EIW_S_FDRCC_V1.STMT_EMSR_DETL_DLY_ALL TRAN
WHERE
TRAN.DATA_MONTH_DATE IN (&bom) AND
TRAN.CKEY SYS IN (3531', '4644', '5299', '5581', '5583', '5765', '6298', '8413', '8414', '8415') AND
TRAN.CDTL_ITEM_AMT<>0
GROUP BY
TRAN.ACCOUNT_NUMBER
ORDER BY
TRAN.ACCOUNT_NUMBER

);

disconnect from teradata;
quit;
run;

/***** Combining Minimaster and Transaction data *****/

data tempeiw;
merge tempmm (in=a)
temptran (in=b);
by account_number;
if a;
run;

/* check to see if next 2 steps are needed

proc sort data=sds_r_pool;
by acct_number descending last_received_date; 
run;

data sds_r_pool;
set sds_r_pool;
by acct_number;
if last.acct_number then output;
run;
*/

/***** Merge SDS and EIW data and Create Payment Behavior categories******/

data sds_r_pool;
merge sds_r_pool (in=a)
tempeiw (in-b rename=(account_number-acct_number));
by acct_number; 

if a;
length ctgy $25.;
            if balboc=. or balboc=0 or dueminlstmth=. or dueminlstmth=0 then ctgy='credbal_nopymtdue';
else if pmtamtneteoc ge balboc then ctgy='pmt_gt_begbal';
else if abs(pmtamtneteoc - dueminlstmth) le .01  then ctgy='pmt_eq_mindue';
else if pmtamtneteoc lt dueminlstmth  then ctgy='pmt_lt_mindue'; 
else if pmtamtneteoc lt balboc  then ctgy='pmt_gt_mindue_lt_begbal';
else ctgy = 'other'
run;


proc means data=sds_r_pool sum missing nway noprint noprint;
class ctgy co openind current_account_indicator;
var baleoc baleom;
where openind=1 or
   /* co=1 or */
    (exstatcd<> 'Z' and baleoc>0);
output out = out.pmtbhv&m._rpool_eiw sum=;
run;

proc export data = out.pmtbhv&m._rpool_eiw 
dbms=xlsx
outfile="/workspace/ccsec/reports/Payment_Behavior/output/Payment_Behavior_RPool_EIW.xlsx"
replace;
sheet="Rep Pool &m.";
run;

data out.pmtbhv&m._rpool_eiw; 
set out.pmtbhv&m._rpool_eiw; 
rename _freq_ = acct_count;
run;

proc format library=work;
value $pymtcat 'credbal_nopymtdue'  =  '% of Accts with a credit balance or no pay due'  
               'pmt_gt_begbal'      = '% of Accts who paid their balance'
               'pmt_eq_mindue'      = '% of Accts who paid only the min pay due'
               'pmt_lt_mindue'      = '% of Accts who paid less than the min pay due (including no payment)'
               'pmt_gt_mindue_lt_begbal' = '% of Accts who paid more than the min pay due but less than the balance'
               'other'              = 'Unknown';

run;


ods html body="/workspace/ccsec/reports/Payment_Behavior/output/Payment_Behavior_RepPool_EIW_&m..xls";
         options fmtsearch=(work);
         proc report data = out.pmtbhv&m._rpool_eiw;
         column ctgy acct_count, (sum p√ßtsum);
         define ctgy / group format= $pymtcat. 'Category';
         define acct_count / format=comma16.0 'Total Accounts';
         define sum / format-comma16.0 'Count';
         define pctsum / 'Percent of Accounts' format=percent8.2;
         rbreak after / dol summarize;
         where co=0;
         title 'Payment Behavior, Rep Pool';
         title2 &title2;
         title3 'Excluding Charge-offs';
         run;
ods html close;

%mend;
%wrk;